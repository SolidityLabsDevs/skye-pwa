// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
  allowAny  = false
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String // jwt google twitter web3 etc
  providerAccountId String  @unique
  type              String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  secret_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id String @id @unique @default(cuid())

  name    String?
  imageId String?
  image   Storage? @relation("avatar", fields: [imageId], references: [id])

  username String @unique @default(uuid())

  email          String?  @unique
  email_verified Boolean? @default(false)
  password       String?

  locale String? @default("en")

  lat Decimal? @db.Decimal(13, 10)
  lng Decimal? @db.Decimal(13, 10)

  role ROLE @default(USER)

  pushSubscription Json?

  accounts Account[]
  sessions Session[]
  storage  Storage[]

  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")

  audios  Audio[]
  answers Answers[]
}

model Answers {
  id String @id @unique @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  question_1 String?
  question_2 String?
  question_3 String?
  question_4 String[]
  question_5 String?
  question_6 String?
  question_7 String?
  question_8 String?
  question_9 String?

  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")
}

model Code {
  id    String  @unique @default(cuid())
  email String?
  value Int?

  valid_until DateTime @default(dbgenerated("NOW() + interval '10 minutes'"))
  created_at  DateTime @default(now())
}
